import { useState, useEffect } from "react";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth, db } from '@/firebase.js'; 
import { collection, getDocs, doc, updateDoc, arrayUnion } from "firebase/firestore";
import SignInComponent from '@/components/SignInComponent'
// import { useRouter } from "next/router";

export default function Home() {
  // home page
  const [user, loading, error] = useAuthState(auth);
  const [allQuests, setAllQuests] = useState(null); // all the quests currently up
  const [questsLoading, setQuestsLoading] = useState(true); // loading state for when im fetching the quests from firestore

  // getting all the surveys and updating the state in this
  useEffect(() => {
    const getAllSurveys = async () => {
      setQuestsLoading(true);
      const allSurveys = await getDocs(collection(db, "surveys")); // returns all the documents in the collection "surveys"
      // console.log(allSurveys);
      // allSurveys.forEach((doc) => {
      //   console.log(`${doc.id} => ${doc.data()}`);
      // });
      setAllQuests(allSurveys.docs);
      // console.log(allSurveys.docs)
      setQuestsLoading(false);
    }
    getAllSurveys();
  }, []);

  // add the user ID to the submitted quest's responders array on submit
  const handleSubmit = async (e, questId) => {
    e.preventDefault();
    console.log('ok finished one');

    try {
      let questRef = doc(db, 'surveys', questId); // getting the doc reference
      // updates doc
      await updateDoc(questRef, {
        responders: arrayUnion(user.uid) // adds the string user.uid to the responders array without creating a new array
      });

      console.log('successfully added user.uid to responders')
    } catch (err) {
      console.error(`Error updating doc: ${err}`);
    }
};
  
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <span className="loading loading-infinity loading-lg"></span>
      </div>
    )
  }

  // need this so the screen doesn't flash before showing the correct screen to the user
  if (questsLoading) {
    return (
        <div className="flex justify-center items-center h-screen">
            <span className="loading loading-infinity loading-lg"></span>
        </div>
    );
  }

  if (error) {
    return (
      <div>Error: {error.message}</div>
    )
  }

  return (
    <>
      <div className="p-4 text-center">
        {user ? (
        // can show the users the actual dashboard
        <div>
          <h1>Welcome, {user.displayName}!</h1>
          <p>Your email: {user.email}</p>
          <p>Your UID: {user.uid}</p>
          
          {/* have this here temporarily */}
          {allQuests && (
            <p>We have {allQuests.length} quests</p>
          )}

          {/* iterating over all the quests, making a form for each unsubmitted one */}
          {/* for the submitted ones, need to show them the responses to that quest */}
          {allQuests && allQuests.map((docSnapshot, index) => {
            const quest = docSnapshot.data(); // the actual document data
            const questId = docSnapshot.id; // the ID of the document that's generated by firestore

            return (
              <div key={index}>
                {/* check here to see if the current user has already responded to this quest or not */}
                {quest.responders.includes(user.uid) ? (
                  <p>You have already responded to this quest.</p>

                ) : (
                  // form stuff here. on submit, im sending the questId so that I can later use it to reference the now 
                  // submitted form and add the user's ID to the responders array inside it
                  // TODO: show user resposnes for the submitted form on submission, and make it update seamlessly without requiring a reload
                  // !!!!!
                  <div className="card bg-base-300 shadow-xl my-4">
                    <form onSubmit={(e) => handleSubmit(e, questId)} className="card-body">
                      <div className="form-control">
                        <label className="label">
                          <span className="label-text text-center block w-full text-lg font-bold">{quest.question}</span>
                        </label>

                        {quest.options.map((opt, optIndex) => (
                          <div key={optIndex} className="flex items-center mb-3">
                            <input
                              type="radio"
                              name={`quest-${index}`}
                              value={opt}
                              className="radio radio-primary mr-2"
                              required
                            />
                            {opt}
                          </div>
                        ))}
                      </div>

                      <button type="submit" className="btn btn-primary mt-4">
                        Finish Quest
                      </button>
                    </form>
                  </div>
                )}
              </div>
            );
          })}



          
      </div>
        ) : (
          // need to let them sign in here
          <div>
            <h1>Please sign in to continue</h1>
            <SignInComponent />
          </div>
        )}
      </div>
    </>
  )
}